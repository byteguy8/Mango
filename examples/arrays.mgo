fn print_arr(arr){
    var i = 0;
    var arr_len = len(arr);

    while(i < arr_len){
        print arr[i];
        i = i + 1;
    }
}

fn copy(arr, until){
    var new_arr = []:until + 1;

    var i = 0;

    while(i <= until){
        new_arr[i] = arr[i];
        i = i + 1;
    }

    return new_arr;
}

fn append_arrs(a, b){
    var a_len = len(a);
    var b_len = len(b);

    var i = 0;
    var ci = 0;
    var c = []:a_len + b_len;

    while(i < a_len){
        c[ci] = a[i];

        ci = ci + 1;
        i  = i + 1;
    }

    i = 0;

    while(i < b_len){
        c[ci] = b[i];

        ci = ci + 1;
        i  = i + 1;
    }

    return c;
}

fn filter_arr(arr, filter){
    var arr_len = len(arr);
    var elements = []:arr_len;

    var i = 0;
    var p = 0;

    while(i < arr_len){
        var element = arr[i];

        if(filter(element)){
            elements[p] = element;
            p = p + 1;
        }

        i = i + 1;
    }

    return copy(elements, p - 1);
}

fn sort_arr(arr, sorter){
    var arr_len = len(arr);

    if(arr_len < 2){
        return arr;
    }

    if(arr_len == 2){
        var a = arr[0];
        var b = arr[1];

        if(sorter(a, b) > 0){
            arr[1] = a;
            arr[0] = b;
        }

        return arr;
    }

    var piv = arr[arr_len / 2];

    var less = filter_arr(arr, (e) => {
        return sorter(e, piv) <= 0;
    });

    var greater = filter_arr(arr, (e) => {
        return sorter(e, piv) > 0;
    });

    return append_arrs(sort_arr(less, sorter), sort_arr(greater, sorter));
}

var before = millis();

var values = sort_arr([7,10,7,3,1], (a, b) => {
    if(a < b){
        return -1;
    }elif(a > b){
        return 1;
    }else{
        return 0;
    }
});

var after = millis();

print "time: " + to_str((after - before) / 1000.0);

var i = 0;

while(i < len(values)){
    print values[i];
    i = i + 1;
}